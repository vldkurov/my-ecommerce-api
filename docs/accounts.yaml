paths:
  /accounts/users:
    get:
      tags:
        - Accounts
      summary: Get all users
      description: Retrieves a list of all users. Requires admin privileges.
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
        403:
          description: Forbidden, requires admin role

  /accounts/users/{userId}:
    get:
      tags:
        - Accounts
      summary: Get user by ID
      description: Retrieves detailed information about a specific user by their ID. Requires user to be authenticated.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve
      responses:
        200:
          description: Detailed information about the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
        404:
          description: User not found

    put:
      tags:
        - Accounts
      summary: Update user by ID
      description: Updates an existing user by their ID. Requires user to be authenticated and to be the user being updated or an admin.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: User updated successfully
        401:
          description: Unauthorized
        404:
          description: User not found

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [ admin, editor, user ]
      required:
        - userId
        - firstName
        - lastName
        - email
        - role

    UserUpdate:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [ admin, editor, user ]
      required:
        - email

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

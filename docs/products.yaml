paths:
  /products:
    get:
      tags:
        - Products
      summary: Retrieve products by category
      description: Fetches a list of products, optionally filtered by a category ID.
      parameters:
        - in: query
          name: categoryId
          schema:
            type: integer
          required: false
          description: Optional category ID to filter the products.
      responses:
        200:
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      tags:
        - Products
      summary: Create a new product
      description: Creates a new product. Requires admin privileges.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        201:
          description: Product created successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden, requires admin role

  /products/{productId}:
    get:
      tags:
        - Products
      summary: Retrieve a specific product by ID
      description: Fetches detailed information about a specific product by its ID.
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: The ID of the product to retrieve
      responses:
        200:
          description: Detailed information about the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found

    put:
      tags:
        - Products
      summary: Update a product by ID
      description: Updates an existing product by its ID. Requires admin privileges.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        200:
          description: Product updated successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden, requires admin role
        404:
          description: Product not found

    delete:
      tags:
        - Products
      summary: Delete a product by ID
      description: Deletes a specific product by its ID. Requires admin privileges.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: The ID of the product to delete
      responses:
        204:
          description: Product deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden, requires admin role
        404:
          description: Product not found

components:
  schemas:
    Product:
      type: object
      properties:
        productId:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: string
        stock:
          type: integer
        categoryId:
          type: integer
      required:
        - productId
        - name
        - price
        - stock
        - categoryId

    NewProduct:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: string
        stock:
          type: integer
        categoryId:
          type: integer
      required:
        - name
        - price
        - categoryId

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

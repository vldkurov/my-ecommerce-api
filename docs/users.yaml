paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Creates a new user account with first name, last name, email, password, and role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input data

  /users/login:
    post:
      tags:
        - Users
      summary: User login
      description: Authenticates a user and returns a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Access token for the authenticated session
        401:
          description: Authentication failed

  /users/logout:
    get:
      tags:
        - Users
      summary: User logout
      description: Logs out a user by invalidating their session token.
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Logout successful

components:
  schemas:
    NewUser:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum: [ admin, editor, user ]
          default: 'user'
      example:
        firstName: John
        lastName: Doe
        email: user@example.com
        password: "123456"

    LoginCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      example:
        email: user@example.com
        password: "123456"

    UserResponse:
      type: object
      properties:
        userId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
      example:
        userId: 1
        firstName: John
        lastName: Doe
        email: user@example.com
        role: "user"

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

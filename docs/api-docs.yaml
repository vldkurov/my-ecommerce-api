openapi: 3.0.0
info:
    title: 'The e-commerce API'
    version: 1.0.0
    description: 'This is a simple CRUD API application made with Express and documented with Swagger'
servers:
    -
        url: 'https://the-e-commerce-api.onrender.com/api'
        description: 'Production server'
paths:
    /users/register:
        post:
            tags:
                - Users
            summary: 'Register a new user'
            description: 'Creates a new user account with first name, last name, email, password, and role.'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NewUser'
            responses:
                '201':
                    description: 'User created successfully'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserResponse'
                '400':
                    description: 'Invalid input data'
    /users/login:
        post:
            tags:
                - Users
            summary: 'User login'
            description: 'Authenticates a user and returns a token.'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginCredentials'
            responses:
                '200':
                    description: 'Login successful'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token: {type: string, description: 'Access token for the authenticated session'}
                '401':
                    description: 'Authentication failed'
    /users/logout:
        get:
            tags:
                - Users
            summary: 'User logout'
            description: 'Logs out a user by invalidating their session token.'
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Logout successful'
    /products:
        get:
            tags:
                - Products
            summary: 'Retrieve products by category'
            description: 'Fetches a list of products, optionally filtered by a category ID.'
            parameters:
                -
                    in: query
                    name: categoryId
                    schema:
                        type: integer
                    required: false
                    description: 'Optional category ID to filter the products.'
            responses:
                '200':
                    description: 'A list of products'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Product'
        post:
            tags:
                - Products
            summary: 'Create a new product'
            description: 'Creates a new product. Requires admin privileges.'
            security:
                -
                    bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NewProduct'
            responses:
                '201':
                    description: 'Product created successfully'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden, requires admin role'
    '/products/{productId}':
        get:
            tags:
                - Products
            summary: 'Retrieve a specific product by ID'
            description: 'Fetches detailed information about a specific product by its ID.'
            parameters:
                -
                    in: path
                    name: productId
                    schema:
                        type: integer
                    required: true
                    description: 'The ID of the product to retrieve'
            responses:
                '200':
                    description: 'Detailed information about the product'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Product'
                '404':
                    description: 'Product not found'
        put:
            tags:
                - Products
            summary: 'Update a product by ID'
            description: 'Updates an existing product by its ID. Requires admin privileges.'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: path
                    name: productId
                    schema:
                        type: integer
                    required: true
                    description: 'The ID of the product to update'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NewProduct'
            responses:
                '200':
                    description: 'Product updated successfully'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden, requires admin role'
                '404':
                    description: 'Product not found'
        delete:
            tags:
                - Products
            summary: 'Delete a product by ID'
            description: 'Deletes a specific product by its ID. Requires admin privileges.'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: path
                    name: productId
                    schema:
                        type: integer
                    required: true
                    description: 'The ID of the product to delete'
            responses:
                '204':
                    description: 'Product deleted successfully'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden, requires admin role'
                '404':
                    description: 'Product not found'
    /carts:
        post:
            tags:
                - Carts
            summary: 'Create a new cart'
            description: 'Creates a new cart for the authenticated user.'
            security:
                -
                    bearerAuth: []
            responses:
                '201':
                    description: 'Cart created successfully'
                '401':
                    description: Unauthorized
    '/carts/{cartId}':
        post:
            tags:
                - Carts
            summary: 'Add products to a cart'
            description: 'Adds products to the specified cart by ID.'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: path
                    name: cartId
                    required: true
                    schema:
                        type: integer
                    description: 'The ID of the cart to add products to.'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                productId:
                                    type: integer
                                    description: 'The ID of the product to add to the cart.'
                                quantity:
                                    type: integer
                                    description: 'The quantity of the product to add.'
                            required:
                                - productId
                                - quantity
            responses:
                '200':
                    description: 'Product added to cart successfully'
                '401':
                    description: Unauthorized
                '404':
                    description: 'Cart not found'
        get:
            tags:
                - Carts
            summary: 'Retrieve a cart''s contents'
            description: 'Retrieves the contents of the specified cart by ID.'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: path
                    name: cartId
                    required: true
                    schema:
                        type: integer
                    description: 'The ID of the cart to retrieve.'
            responses:
                '200':
                    description: 'Cart retrieved successfully'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    cartId: {type: integer, description: 'The cart ID.'}
                                    items: {type: array, items: {$ref: '#/components/schemas/CartItem'}}
                '401':
                    description: Unauthorized
                '404':
                    description: 'Cart not found'
    '/carts/{cartId}/checkout':
        post:
            tags:
                - Carts
            summary: 'Checkout a cart'
            description: 'Processes the checkout for the specified cart by ID.'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: path
                    name: cartId
                    required: true
                    schema:
                        type: integer
                    description: 'The ID of the cart to checkout.'
            responses:
                '200':
                    description: 'Checkout processed successfully'
                '401':
                    description: Unauthorized
                '404':
                    description: 'Cart not found'
    /orders:
        get:
            tags:
                - Orders
            summary: 'Retrieve a list of orders'
            description: 'Retrieve a list of orders for the authenticated user.'
            responses:
                '200':
                    description: 'A list of orders.'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Order'
    '/orders/{orderId}':
        get:
            tags:
                - Orders
            summary: 'Retrieves a specific order by ID'
            description: 'Fetches detailed information about an order, including items and total price, based on the order ID provided in the request path. Requires user authentication.'
            parameters:
                -
                    in: path
                    name: orderId
                    required: true
                    schema:
                        type: integer
                    description: 'The ID of the order to retrieve'
            responses:
                '200':
                    description: 'Successfully retrieved the order'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Order'
                '401':
                    description: 'Unauthorized, token missing or invalid'
                '404':
                    description: 'Order not found'
    /accounts/users:
        get:
            tags:
                - Accounts
            summary: 'Get all users'
            description: 'Retrieves a list of all users. Requires admin privileges.'
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'A list of users'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                '401':
                    description: Unauthorized
                '403':
                    description: 'Forbidden, requires admin role'
    '/accounts/users/{userId}':
        get:
            tags:
                - Accounts
            summary: 'Get user by ID'
            description: 'Retrieves detailed information about a specific user by their ID. Requires user to be authenticated.'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: path
                    name: userId
                    required: true
                    schema:
                        type: integer
                    description: 'The ID of the user to retrieve'
            responses:
                '200':
                    description: 'Detailed information about the user'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    description: Unauthorized
                '404':
                    description: 'User not found'
        put:
            tags:
                - Accounts
            summary: 'Update user by ID'
            description: 'Updates an existing user by their ID. Requires user to be authenticated and to be the user being updated or an admin.'
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: path
                    name: userId
                    required: true
                    schema:
                        type: integer
                    description: 'The ID of the user to update'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserUpdate'
            responses:
                '200':
                    description: 'User updated successfully'
                '401':
                    description: Unauthorized
                '404':
                    description: 'User not found'
components:
    schemas:
        NewUser:
            type: object
            required:
                - firstName
                - lastName
                - email
                - password
            properties:
                firstName:
                    type: string
                lastName:
                    type: string
                email:
                    type: string
                    format: email
                password:
                    type: string
                    format: password
                role:
                    type: string
                    enum:
                        - admin
                        - editor
                        - user
                    default: user
            example:
                firstName: John
                lastName: Doe
                email: user@example.com
                password: '123456'
        LoginCredentials:
            type: object
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    format: email
                password:
                    type: string
                    format: password
            example:
                email: user@example.com
                password: '123456'
        UserResponse:
            type: object
            properties:
                userId:
                    type: integer
                firstName:
                    type: string
                lastName:
                    type: string
                email:
                    type: string
                    format: email
                role:
                    type: string
            example:
                userId: 1
                firstName: John
                lastName: Doe
                email: user@example.com
                role: user
        Product:
            type: object
            properties:
                productId:
                    type: integer
                name:
                    type: string
                description:
                    type: string
                price:
                    type: string
                stock:
                    type: integer
                categoryId:
                    type: integer
            required:
                - productId
                - name
                - price
                - stock
                - categoryId
        NewProduct:
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
                price:
                    type: string
                stock:
                    type: integer
                categoryId:
                    type: integer
            required:
                - name
                - price
                - categoryId
        CartItem:
            type: object
            properties:
                cartItemId:
                    type: integer
                    description: 'The cart item ID.'
                cartId:
                    type: integer
                    description: 'The cart ID associated with this item.'
                productId:
                    type: integer
                    description: 'The product ID of the item added to the cart.'
                quantity:
                    type: integer
                    description: 'The quantity of the product.'
            required:
                - cartItemId
                - cartId
                - productId
                - quantity
        Order:
            type: object
            required:
                - totalPrice
                - orderId
                - userId
                - status
            properties:
                totalPrice:
                    type: string
                    description: 'The total price of the order.'
                orderId:
                    type: integer
                    description: 'The order ID.'
                userId:
                    type: integer
                    description: 'The ID of the user who placed the order.'
                status:
                    type: string
                    description: 'The status of the order.'
                    enum:
                        - pending
                        - completed
                        - cancelled
            example:
                totalPrice: £100.00
                orderId: 1
                userId: 1
                status: pending
        OrderItem:
            type: object
            required:
                - productId
                - quantity
                - price
            properties:
                productId:
                    type: integer
                    description: 'Unique identifier for the product'
                quantity:
                    type: integer
                    description: 'Number of items of the product'
                price:
                    type: string
                    description: 'Price of the product item'
            example:
                productId: 1
                quantity: 2
                price: £19.99
        User:
            type: object
            properties:
                userId:
                    type: integer
                firstName:
                    type: string
                lastName:
                    type: string
                email:
                    type: string
                role:
                    type: string
                    enum:
                        - admin
                        - editor
                        - user
            required:
                - userId
                - firstName
                - lastName
                - email
                - role
        UserUpdate:
            type: object
            properties:
                firstName:
                    type: string
                lastName:
                    type: string
                email:
                    type: string
                role:
                    type: string
                    enum:
                        - admin
                        - editor
                        - user
            required:
                - email
    responses: {}
    parameters: {}
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
